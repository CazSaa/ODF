start: attack_tree (fault_tree (object_graph odglog | odglog object_graph) | object_graph (fault_tree odglog | odglog fault_tree) | odglog (fault_tree object_graph | object_graph fault_tree))
   | fault_tree (attack_tree (object_graph odglog | odglog object_graph) | object_graph (attack_tree odglog | odglog attack_tree) | odglog (attack_tree object_graph | object_graph attack_tree))
   | object_graph (attack_tree (fault_tree odglog | odglog fault_tree) | fault_tree (attack_tree odglog | odglog attack_tree) | odglog (attack_tree fault_tree | fault_tree attack_tree))
   | odglog (attack_tree (fault_tree object_graph | object_graph fault_tree) | fault_tree (attack_tree object_graph | object_graph attack_tree) | object_graph (attack_tree fault_tree | fault_tree attack_tree))

attack_tree: "[odg.attack_tree]"i disruption_tree
fault_tree: "[odg.fault_tree]"i disruption_tree

disruption_tree: tln _node*

tln: "toplevel"i NODE_NAME ";"

_node: (intermediate_node | basic_node) ";"

intermediate_node: NODE_NAME gate NODE_NAME+

gate: "and"i -> and_gate
    | "or"i -> or_gate

basic_node: NODE_NAME attribute_list?

attribute_list: probability ( objects condition? | condition objects? )?
              | objects ( probability condition? | condition probability? )?
              | condition ( probability objects? | objects probability? )?

probability: "prob"i "=" DECIMAL
objects: "objects"i "=" "[" node_list? "]"
condition: "cond"i "=" "(" boolean_formula ")"


object_graph: "[odg.object_graph]"i object_graph_tree
object_graph_tree: tln _object*

_object: (intermediate_object | basic_object) ";"

intermediate_object: NODE_NAME "has"i NODE_NAME+

basic_object: NODE_NAME properties?

properties: "properties"i "=" "[" node_list? "]"


odglog: "[formulas]"i (odglog_formula ";")+

odglog_formula: layer1_query -> layer1_query
              | layer2_query -> layer2_query
              | layer3_query -> layer3_query

layer1_query: "[[" layer1_formula "]]" -> compute_all
              | layer1_formula -> check

?layer1_formula: configuration layer1_mrs -> with_configuration
               | layer1_no_mrs

?layer1_mrs: layer1_mrs boolean_evidence -> with_boolean_evidence
              | _boolean_template{l1_atom_formula}

?l1_atom_formula: "(" layer1_mrs ")"
            | _MRS "(" layer1_mrs ")" -> mrs
            | NODE_NAME -> node
            | _NEG l1_atom_formula -> neg_formula
            
?layer1_no_mrs: layer1_no_mrs boolean_evidence -> with_boolean_evidence
              | _boolean_template{l1_no_mrs_atom_formula}

?l1_no_mrs_atom_formula: "(" layer1_no_mrs ")"
            | NODE_NAME -> node
            | _NEG l1_no_mrs_atom_formula -> neg_formula

layer2_query: configuration layer2_formula

?layer2_formula: layer2_formula probability_evidence -> with_probability_evidence
               | _boolean_template{l2_atom_formula}

?l2_atom_formula: "(" layer2_formula ")"
            | NODE_NAME -> node
            | _NEG l2_atom_formula -> neg_formula
            | _P "(" layer1_formula ")" RELATION DECIMAL -> probability_formula


layer3_query: layer3_formula

layer3_formula: layer3_formula boolean_evidence -> with_boolean_evidence
              | "MostRiskyA" "(" NODE_NAME ")" -> most_risky_a
              | "MostRiskyF" "(" NODE_NAME ")" -> most_risky_f
              | "OptimalConf" "(" NODE_NAME ")" -> optimal_conf
              | "MaxTotalRisk" "(" NODE_NAME ")" -> max_total_risk
              | "MinTotalRisk" "(" NODE_NAME ")" -> min_total_risk


configuration: "{" ((boolean_mapping ",")* boolean_mapping)? "}"

boolean_evidence: "[" (boolean_mapping ",")* boolean_mapping "]"
boolean_mapping: NODE_NAME ":" TRUTH_VALUE

probability_evidence: "[" (probability_mapping ",")* probability_mapping "]"
probability_mapping: NODE_NAME "=" DECIMAL


node_list: (NODE_NAME ",")* NODE_NAME


boolean_formula: _boolean_template{atom_formula}

_boolean_template{atom}: impl_formula{atom}

?impl_formula{atom}: or_formula{atom} (_IMPLIES impl_formula{atom})?
?or_formula{atom}: (or_formula{atom} _OR)? and_formula{atom}
?and_formula{atom}: (and_formula{atom} _AND)? comp_formula{atom}
?comp_formula{atom}: comp_formula{atom} _EQUIV atom -> equiv_formula
            | comp_formula{atom} _NEQUIV atom -> nequiv_formula
            | atom

?atom_formula: "(" boolean_formula ")"
            | NODE_NAME -> node
            | _NEG atom_formula -> neg_formula


RELATION: "<" | "<=" | "==" | ">=" | ">"
NODE_NAME: CNAME
TRUTH_VALUE: "0" | "1"

_NEG: "!" | "\\neg"
_AND: "&&" | "\\land"
_OR: "||" | "\\lor"
_IMPLIES: "=>" | "\\implies"
_EQUIV: "==" | "\\equiv"
_NEQUIV: "!=" | "\\nequiv"

_MRS.2: "MRS" | "\\mrs"
_P.2: "P"


%import common.DECIMAL
%import common.CNAME
%import common.WS
%import common.CPP_COMMENT

%ignore WS
%ignore CPP_COMMENT
